name: build-docker-images
on:
  workflow_dispatch:
  workflow_call:
jobs:
  common-tests:
    runs-on: ubuntu-latest
    name: run-tests-common
    strategy:
      fail-fast: false
      matrix:
        python: ["3.8","3.9","3.10","3.11","3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - uses: federicocarboni/setup-ffmpeg@v2
      - name: Install nerfbaselines
        run: |
          pip install --upgrade pip
          pip install -e '.[dev]'
      - name: Run pyright, pytests
        run: |
          if [[ "${{ matrix.python }}" == "3.7" ]]; then
            export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
            pip install tensorboard==2.11.2
            pip install 'protobuf<4'
          fi
          pytest -vrA
      - name: Install dev-extras
        id: dev-extras
        if: ${{ matrix.python == '3.9' }}
        run: |
          pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
          pip install 'jax[cpu]'
          pip install -e ".[extras,dev]"
          pip install torchmetrics==1.4.1 dm_pix
      - name: Run dev-extras tests
        run: |
          pyright
          pytest -v --run-extras
        if: ${{ steps.dev-extras.outcome == 'success' }}

  setup:
    runs-on: ubuntu-latest
    needs: common-tests
    outputs:
      environments: ${{ steps.data-step.outputs.environments }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install nerfbaselines
        run: |
          pip install --upgrade pip
          pip install -e '.[dev]'
      - name: Run tests
        run: pytest -vrA
      - id: data-step
        run: |
          pip install --upgrade pip
          pip install -e .
          python -c '
          import nerfbaselines.backends._docker as d; 
          import json; 
          environments = d.get_docker_environments_to_build()
          blacklist = ("nerfw-reimpl", "nerfonthego", "trips")
          environments = [x for x in environments if x not in blacklist]
          print("environments=" + json.dumps([x for x in environments]))' >> $GITHUB_OUTPUT

  build-base-docker-image:
    runs-on: ubuntu-latest
    needs: common-tests
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Free root space
        uses: almahmoud/free-root-space@main
        with:
          remove-gcc: false
          remove-cplusplus: false
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install nerfbaselines
        run: |
          pip install --upgrade pip
          pip install -e '.[dev]'
      - name: Build image
        run: |
          nerfbaselines build-docker-image --push --skip-if-exists-remotely --tag-latest

  build-docker-images:
    runs-on: ubuntu-latest
    name: build-docker-images
    needs: setup
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    steps:
      - name: Free root space
        uses: almahmoud/free-root-space@main
        with:
          remove-gcc: false
          remove-cplusplus: false
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install nerfbaselines
        run: |
          pip install --upgrade pip
          pip install -e '.[dev]'
      - name: Build image
        run: |
          nerfbaselines build-docker-image --environment "${{ matrix.environment }}" --push --skip-if-exists-remotely --tag-latest
